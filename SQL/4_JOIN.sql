-- FROM 절에 ','로 구분하여 합치게 될 테이블 명을 기술하고 WHERE절에 합치기에 사용할 컬럼 명 명시
SELECT *
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;

-- ANSI
-- 연결에 사용하려는 컬럼 명이 같은 경우 USING() 사용, 다른 경우 ON() 사용

-- JOIN : 하나 이상의 테이블에서 데이터를 조회하기 위해 사용
-- 사번, 사원명, 부서 코드, 부서명 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE;

SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID; -- 이너조인(내부조인), 오라클 구문

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
    JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID); --ANSI
    
SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE; -- 오라클 구문

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING(JOB_CODE);
    
    
-- 부서 명과 해당 부서의 지역 명 조회(DEPT_TITLE, LOCAL_NAME)
-- 오라클
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT D, LOCATION L
WHERE D.LOCATION_ID = L.LOCAL_CODE;
-- ANSI
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- INNER JOIN과 OUTER JOIN
-- 기본적으로 JOIN은 INNER JOIN이며 두 개 이상의 테이블을 조인할 때 일치하는 값이 없는 행은 조인에서 제외됨
-- OUTER JOIN은 일치하지 않은 값도 포함이 되며 반드시 OUTER JOIN 명시

-- OUTER JOIN
-- LEFT OUTER JOIN
-- RIGHT OUTER JOIN
-- FULL OUTER JOIN

-- 외부 조인(OUTER JOIN)
-- 두 테이블의 지정하는 컬럼 값이 일치 하지 않는 행도 조인에 포함
-- LEFT [OUTER] JOIN : 왼쪽에 기술된 테이블의 컬럼 수를 기준으로 JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    LEFT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
    
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE E, DEPARTMENT D
WHERE E.DEPT_CODE = D.DEPT_ID(+); -- '내가 너한테 맞춰줄게 ~' 라고 말하는 쪽에 (+)를 붙임

-- RIGHT [OUTER] JOIN : 오른쪽에 기술된 테이블의 컬럼수를 기준으로 조인
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
    
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE , DEPARTMENT 
WHERE DEPT_CODE(+) = DEPT_ID;

-- FULL
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- 오라클은 제공하지 않아 표현이 불가능하다. 
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID(+);


-- CREOSS JOIN 
SELECT EMP_NAME
FROM EMPLOYEE;

SELECT DEPT_TITLE
FROM DEPARTMENT;

SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    CROSS JOIN DEPARTMENT;
    
    
    
-- NON_EQU JOIN
-- '='(등호)를 사용하지 않는 조인문
-- 지정한 컬럼 값이 일치하는 경우가 아닌 값의 범위에 포함되는 행들을 연결하는 방식
SELECT EMP_NAME, SALARY, E.SAL_LEVEL
FROM EMPLOYEE E
     JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);
    
-- 셀프조인 == 자체조인
-- 같은 테이블 조인(자기자신과 조인)

SELECT E.EMP_ID, E.EMP_NAME "사원이름", E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME "관리자이름"
FROM EMPLOYEE E, EMPLOYEE M
WHERE E.MANAGER_ID = M.EMP_ID;

SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
FROM EMPLOYEE E
    JOIN EMPLOYEE M ON (E.MANAGER_ID = M.EMP_ID);
    
-- 다중 조인 : N개의 테이블을 조회할 때 사용
-- 사번, 사원 명, 부서 코드, 부서 명, 지역 명(LOCAL_NAME) 조회

-- 오라클
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID 
      AND LOCATION_ID = LOCAL_CODE;
      
-- ANSI 
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
     JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
     JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 직급이 대리이면서 아시아 지역에 근무하는 직원조회
-- 사번, 이름, 직급명, 부서명, 근무지역명, 급여를 조회하세요.
SELECT E.EMP_ID, E.EMP_NAME, J.JOB_NAME, D.DEPT_TITLE, L.LOCAL_NAME, SALARY
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION L
WHERE E.JOB_CODE = J.JOB_CODE
AND E.DEPT_CODE = D.DEPT_ID
AND D.LOCATION_ID = L.LOCAL_CODE
AND J.JOB_NAME = '대리' AND L.LOCAL_NAME LIKE 'ASIA%';

SELECT E.EMP_ID, E.EMP_NAME, J.JOB_NAME, D.DEPT_TITLE, L.LOCAL_NAME, SALARY
FROM EMPLOYEE E
     JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
     JOIN LOCATION L ON (D.LOCATION_ID = L.LOCAL_CODE)
     JOIN JOB J USING (JOB_CODE)
WHERE J.JOB_NAME = '대리' AND L.LOCAL_NAME LIKE 'ASIA%';

-- 오라클
SELECT E.EMP_ID, E.EMP_NAME, D.DEPT_TITLE, L.LOCAL_NAME, SALARY
FROM EMPLOYEE E, LOCATION L, JOB J, DEPARTMENT D
WHERE E.JOB_CODE = J.JOB_CODE
AND D.LOCATION_ID = L.LOCAL_CODE
AND E.DEPT_CODE = D.DEPT_ID
AND J.JOB_NAME = '대리' AND L.LOCAL_NAME LIKE 'ASIA%';

-- ANSI
SELECT E.EMP_ID, E.EMP_NAME, D.DEPT_TITLE, L.LOCAL_NAME 
FROM EMPLOYEE E
    JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
    JOIN DEPARTMENT D ON ( D.DEPT_ID = E.DEPT_CODE)
    JOIN LOCATION L ON (L.LOCAL_CODE = D.LOCATION_ID)
WHERE J.JOB_NAME = '대리' AND L.LOCAL_NAME LIKE 'ASIA%';



